#suite s21_sscanf_chars_suite

// [%%]


#test s21_sscanf_perc_1
int a1, a2;
int b1 = 80, b2 = 33;
int c1 = 55, c2 = 33;
const char str[] = "249 % 333 % 18";
const char fstr[] = "%d %%%d %%\t%d";
int res1 = s21_sscanf(str, fstr, &a1, &b1, &c1);
int res2 = sscanf(str, fstr, &a2, &b2, &c2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);


#test s21_sscanf_perc_2
int a1 = 1234, a2 = 33333;

const char str[] = "%%%249";
const char fstr[] = "%%%%%%%d";
int res1 = s21_sscanf(str, fstr, &a1);
int res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test s21_sscanf_perc_3
const char str[] = "%%%";
const char fstr[] = "%%%%%%";
int res1 = s21_sscanf(str, fstr);
int res2 = sscanf(str, fstr);

ck_assert_int_eq(res1, res2);


#test s21_sscanf_perc_4
char fstr[] = "%% %%nb%n";
char str[] = "%%nx";
int n1 = 77, n2 = 77;
int res1 = s21_sscanf(str, fstr, &n1);
int res2 = sscanf(str, fstr, &n2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(n1, n2);



// [%c]

#test s21_sscanf_chars_1
char fstr[] = "%c %c\t%c\n%c";
char str[] = "   w     x y z";
int a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

int res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);

int res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test s21_sscanf_chars_2
char fstr[] = "%c%c%c%c";
char str[] = "wxyz";
int a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

int res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);

int res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test s21_sscanf_chars_3
char fstr[] = "%c %c %c\t%c";
char str[] = "? S !   %   ";
int a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

int res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test s21_sscanf_chars_4
char fstr[] = "%c %c %c %c";
char str[] = "   123 4    ";
int a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

int res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);

int res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test s21_sscanf_chars_5
char fstr[] = "%c %c %c %c";
char str[] = "hero";
int a1 = 0, a2 = 5, b1 = 0, b2 = 5, c1 = 0, c2 = 5, d1 = 0, d2 = 5;

int res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);

int res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);


#test s21_sscanf_chars_6
char fstr[] = "%*c%*c%*c%c";
char str[] = "....!";
int a1 = 0, a2 = 0;

int res1 = s21_sscanf(str, fstr, &a1);
int res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);


#test s21_sscanf_chars_escape_1
char fstr[] = "%c%c%c%c";
char str[] = "\\\n\t\t\t";
int a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

int res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);


#test s21_sscanf_chars_escape_2
char fstr[] = "%c%c %c %c";
char str[] = "\\\n\t\t\t";
int a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

int res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);


#test s21_sscanf_chars_len_1
char fstr[] = "%1c %c %c %0c";
char str[] = "z *'@";
int a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0, d1 = 0, d2 = 0;

int res1 = s21_sscanf(str, fstr, &a1, &b1, &c1, &d1);
int res2 = sscanf(str, fstr, &a2, &b2, &c2, &d2);
ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);



#test s21_sscanf_chars_no_assign_1
char fstr[] = "%*c%*c%*c%*c";
char str[] = "   c ";
int a1 = 0, a2 = 0;

int res1 = s21_sscanf(str, fstr, &a1);
int res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);

#test s21_sscanf_chars_no_assign_2

char fstr[] = "%*c%*c%*c%c";
char str[] = "abcd ";
int a1 = 0, a2 = 0;

int res1 = s21_sscanf(str, fstr, &a1);
int res2 = sscanf(str, fstr, &a2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);







// [%s]

#test s21_sscanf_strings_1
char s1[BUFF_SIZE] = {0};
char s2[BUFF_SIZE] = {0};
char s3[BUFF_SIZE] = {0};
char s4[BUFF_SIZE] = {0};
char s5[BUFF_SIZE] = {0};
char s6[BUFF_SIZE] = {0};
char s7[BUFF_SIZE] = {0};
char s8[BUFF_SIZE] = {0};

const char str[] = "\tHarry Hermione Hagrid Snape\n";
const char fstr[] = "%s%s %s %s";

int res1 = s21_sscanf(str, fstr, s1, s2, s3, s4);
int res2 = sscanf(str, fstr, s5, s6, s7, s8);
ck_assert_int_eq(res1, res2);
ck_assert_str_eq(s1, s5);
ck_assert_str_eq(s2, s6);
ck_assert_str_eq(s3, s7);
ck_assert_str_eq(s4, s8);

#test s21_sscanf_strings_2
char s1[BUFF_SIZE] = {0};
char s2[BUFF_SIZE] = {0};

const char str[] = "\tHarry Hermione Hagrid Snape\n    %Patronus";
const char fstr[] = "%*s%*s%*s%*s%%%s";

int res1 = s21_sscanf(str, fstr, s1);
int res2 = sscanf(str, fstr, s2);

ck_assert_int_eq(res1, res2);
ck_assert_str_eq(s1, s2);


#test s21_sscanf_strings_3
char s1[BUFF_SIZE] = {0};
char s2[BUFF_SIZE] = {0};
char s3[BUFF_SIZE] = {0};
char s4[BUFF_SIZE] = {0};

int a1 = 0, a2 = 0;
unsigned int u1 = 0, u2 = 0;
const char str[] = "123Volcano 1994???????????\n456789";
const char fstr[] = "%*d%s%d%s%u";

int res1 = s21_sscanf(str, fstr, s1, &a1, s3, &u1);
int res2 = s21_sscanf(str, fstr, s2, &a2, s4, &u2);

ck_assert_int_eq(res1, res2);
ck_assert_int_eq(a1, a2);
ck_assert_str_eq(s1, s2);
ck_assert_int_eq(u1, u2);
ck_assert_str_eq(s3, s4);





#test s21_sscanf_c_s_no_assign_1
char format[] = "aa%*2c%s";
char str[] = "aaweare here";
char s1[20] = "111111111111";
char s2[20] = "111111111111";

int res1 = s21_sscanf(str, format, s1);
int res2 = sscanf(str, format, s2);

ck_assert_int_eq(res1, res2);
ck_assert_str_eq(s1, s2);


#test s21_sscanf_c_s_no_assign_2
char format[] = "aa %*2c%s";
char str[] = "aa\n\n\taahouse\t1";
char s1[20] = "111111111111";
char s2[20] = "111111111111";

int res1 = s21_sscanf(str, format, s1);
int res2 = sscanf(str, format, s2);

ck_assert_int_eq(res1, res2);
ck_assert_str_eq(s1, s2);



#test s21_sscanf_chars_width_1
char s1[BUFF_SIZE] = {0};
char s2[BUFF_SIZE] = {0};
char s3[BUFF_SIZE] = {0};
char s4[BUFF_SIZE] = {0};
char s5[BUFF_SIZE] = {0};
char s6[BUFF_SIZE] = {0};
char s7[BUFF_SIZE] = {0};
char s8[BUFF_SIZE] = {0};

const char str[] = "Snape\tHarry";
const char fstr[] = "%1s%3s%s%1s";

int res1 = s21_sscanf(str, fstr, s1, s2, s3, s4);
int res2 = sscanf(str, fstr, s5, s6, s7, s8);
ck_assert_int_eq(res1, res2);

ck_assert_str_eq(s1, s5);
ck_assert_str_eq(s2, s6);
ck_assert_str_eq(s3, s7);
ck_assert_str_eq(s4, s8);


#test s21_sscanf_chars_width_2
char format[] = "%10s %6c %%%c";
char str[] = "12345678900x15 1 %23";
char s1[20] = "111111111111";
char s2[20] = "111111111111";
char c1[20] = "222222222222";
char c2[20] = "222222222222";
char c3, c4;

int res1 = s21_sscanf(str, format, s1, c1, &c3);
int res2 = sscanf(str, format, s2, c2, &c4);

ck_assert_int_eq(res1, res2);
ck_assert_str_eq(s1, s2);
ck_assert_str_eq(c1, c2);
ck_assert_int_eq(c3, c4);

#test s21_sscanf_chars_width_3
char format[] = "aaaaa%10s %6c %%%c";
char str[] = "aaaaa12345678900x15 1 23";
char s1[20] = "111111111111";
char s2[20] = "111111111111";
char c1[20] = "222222222222";
char c2[20] = "222222222222";
char c3 = '?', c4 = '?';

int res1 = s21_sscanf(str, format, s1, c1, &c3);
int res2 = sscanf(str, format, s2, c2, &c4);

ck_assert_int_eq(res1, res2);
ck_assert_str_eq(s1, s2);
ck_assert_str_eq(c1, c2);
ck_assert_int_eq(c3, c4);

#test s21_sscanf_chars_width_4
char format[] = "aaaaa%100s %6c %%%c";
char str[] = "aaaaa12345678900x15 1 23";
char s1[20] = "111111111111";
char s2[20] = "111111111111";
char c1[20] = "222222222222";
char c2[20] = "222222222222";
char c3 = '?', c4 = '?';

int res1 = s21_sscanf(str, format, s1, c1, &c3);
int res2 = sscanf(str, format, s2, c2, &c4);

ck_assert_int_eq(res1, res2);
ck_assert_str_eq(s1, s2);
ck_assert_str_eq(c1, c2);
ck_assert_int_eq(c3, c4);

#test s21_sscanf_chars_width_5
char s1[BUFF_SIZE] = {0};
char s2[BUFF_SIZE] = {0};
char s3[BUFF_SIZE] = {0};
char s4[BUFF_SIZE] = {0};
char s5[BUFF_SIZE] = {0};
char s6[BUFF_SIZE] = {0};
char s7[BUFF_SIZE] = {0};
char s8[BUFF_SIZE] = {0};

const char str[] = "coffee\tmilk\tsugar\tautumn";
const char fstr[] = "%3s%4s%4s%*s\t%s";

int res1 = s21_sscanf(str, fstr, s1, s2, s3, s4);
int res2 = sscanf(str, fstr, s5, s6, s7, s8);

ck_assert_int_eq(res1, res2);

ck_assert_str_eq(s1, s5);
ck_assert_str_eq(s2, s6);
ck_assert_str_eq(s3, s7);
ck_assert_str_eq(s4, s8);
